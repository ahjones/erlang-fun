* Erlang
** Misc
   90% of the TV phone voting systems run on Erlang.
   "Soft real time" : don't rely on it.
** Basic Erlang
*** Running
    c(module). % compiles the module
    module:function(). % Calls the function

*** Data types
**** Integers
     - 1
     - 10
     - $a - the ascii value for a

**** Floats
     - Not efficient
     - 6.2134
     - Erlang comes from telecomms that doesn't really use floats.
     - Division with / always returns floating point numbers.
     - Use div and rem if you want an integer.

**** Constant literals
     - Atoms
     - Start lower case or enclosed with ''

**** Booleans
     - No booleans: false and true are atoms
     - 1 =/= 2 true
     - 1 < two. : true, but comparing lexicographicaly

**** Tuples
     - Data type with fixed num of items
     - {123, bcd}
     - Can contain valid erlang expressions
     - Tagged tuple: {person, 'Andrew', 'Jones'}

**** Lists
     - Variable number of items
     - [1, 2, 3, eight, nine]
     - Strings are lists of ASCII values
     - [$h,$e,$l,$l,$o] : "hello"
     - Head and tail
     - List = [Element | List] or []
     - Lists with an empty tail element are called proper lists
     - [ 1 ] is the same as [1 | [] ]

**** Variables
     - Start with upper case letter or underscore
     - Underscore is the don't care variable: won't be bound
     - Can only be bound once
     - Forget: f(). f(A).

**** Complex data structures
     - Nested simple data structures
     - Eg binary tree with tuple

*** Pattern matching
    Used for assigning values to variables, controlling execution,
    extracting values from compound types.

    Pattern = Expression

    #+BEGIN_SRC erlang
    {B, C, D} = {10, foo, bar}.

    [E, F | G] = [1,2,3,4,5].
    #+END_SRC

    Must either succeed or fail.

    src_erlang{[A,B] = [ 1 ]} fails.

*** Functions

    #+BEGIN_SRC erlang
    area({square, Side}) -> Side * Side;
    area({circle, Radius}) -> 3.14 * Radius * Radius;
    #+END_SRC

    clause head: area({square, Side})
    Uses pattern matching for finding function to call
    Semicolon is clause seperator
    Period is function terminator

    Can't type them in the shell, they must be in a module.

    The first clause that's matched is used. At least one clause must
    match.

    #+BEGIN_SRC erlang
    factorial(0) -> 1;
    factorial(N) -> N * factorial(N-1).
    #+END_SRC
    
*** Condition evaluation

    #+BEGIN_SRC erlang
    case lists:member(foo, List) of 
        true -> ok;
	false -> {error, unknown} % note no terminator
    end
    #+END_SRC

    Idiomatic erlang doesn't catch errors. There'll be a runtime error
    if a pattern doesn't match, let it bubble. Don't be defensive,
    don't return {error, unknown} as above.

    #+BEGIN_SRC erlang
    if
        X < 1 -> smaller;
	X > 1 -> greater;
        X == 1 => equal
    end
    #+END_SRC

*** Guards
    
    Can be used in function heads, case clauses, receive and if
    statements.

    #+BEGIN_SRC erlang
    factorial(N) when N > 0 ->
        N * factorial(N-1);
    factorial(0) -> 1.
    #+END_SRC

    If all guards have to succeed use ',' to separate them. If one
    guard has to succeed use ';' to separate them.

    #+BEGIN_SRC erlang
    valid_age(Age) when Age >= 18, Age =< 99 -> % Note >= and =<
        true;
    valid_age(_) ->
        false;
    #+END_SRC

*** Recursion
    Erlang has TCO.

*** Builtins (BIFs)
    date()
    time()
    length(List)
    ...etc

    Be careful running the BIFs: the process won't be suspended until
    the BIF has completed executing.
**** Meta

     #+BEGIN_SRC erlang
     Module = io.
     Function = format.
     Arguments = ["Hello world~n", []].
     apply(Module, Function, Arguments).
     #+END_SRC

** Concurrent Erlang
*** Useful functions
    Pid = spawn(Mod, Func, Args) :: spawn a new process
    self() :: Get own threads process ID
    register(Alias, Pid) :: Register the process
    
*** Creating a process
    #+BEGIN_SRC erlang
    Pid = spawn(Mod, Func, Args)
    #+END_SRC

    Spawn never fails, but the process can terminate abnormally when
    run-time errors occur.
*** Sending a message
    #+BEGIN_SRC erlang
    Pid ! Msg.

    %eg
    self() ! hello.
    flush().
    #+END_SRC

    There isn't shared memory. The only way to communicate between
    processes is with messages. The send won't fail. If the process
    doesn't exist, the message will get thrown away.

*** Receiving a message
    #+BEGIN_SRC erlang
    receive
        {reset, Board} -> reset(Board);
        _Other         -> {error, unknown_msg}
    end
    #+END_SRC

*** Registering
    Processes can be registered with register. If a message is sent to
    a registerd process that doesn't exist then the sending process
    ends. 

*** Timeout
    #+BEGIN_SRC erlang
    receive
        {reset, Board} -> reset(Board);
        _Other         -> {error, unknown_msg}
    after 1000 ->
        {error, timeout}
    end
    #+END_SRC

    Be careful: after a timeout the receive can be hit.
